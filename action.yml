name: Rainforest QA GitHub Action
description: Easily trigger a Rainforest Run from your GitHub workflows
inputs:
  #
  # Rainforest API parameters
  #
  description:
    description: An arbitrary string to associate with the run
    required: false
    default: ''

  run_group_id:
    description: Only run tests tied to this Run Group
    required: true

  environment_id:
    description: Use a specific environment for this run
    required: false
    default: ''

  custom_url:
    description: Use a specific URL for this run
    required: false
    default: ''

  conflict:
    description: How other currently in-progress runs should be handled. Values are `cancel` to cancel runs in the same environment as your new run and `cancel-all` to cancel all runs
    required: false
    default: ''

  execution_method:
    description: The execution method to use for this run
    required: false
    default: ''

  crowd:
    description: "DEPRECATED: Use `execution_method` instead"
    required: false
    default: ''
    deprecationMessage: "Use `execution_method` instead. For more information, see https://github.com/rainforestapp/github-action/releases/tag/v2.1.0."

  release:
    description: Manually entered release information about the release the run is associated with
    required: false
    default: ''

  automation_max_retries:
    description: If set to a value > 0 and a test fails, it will be retried within the same run, up to that number of times
    required: false
    default: ''

  branch:
    description: Use a specific Rainforest branch for this run
    required: false
    default: ''

  token:
    description: Your Rainforest QA API token
    required: true

  #
  # Rainforest CLI flags
  #
  background:
    description: Do not wait for a run to complete before exiting
    required: false
    default: ''

  #
  # GitHub Action-specific inputs
  #
  dry_run:
    description: Set to true to run parameter validations without starting a new Rainforest run
    required: false
    default: ''

  cache_key:
    description: The cache key to use for saving/restoring a Rainforest run ID (used to rerun failed tests)
    required: false
    default: '${{ github.job }}-${{ github.action }}'

outputs:
  command:
    description: The CLI command that was run
    value: ${{ steps.validate.outputs.command }}
  error:
    description: The validation error that was raised
    value: ${{ steps.validate.outputs.error }}

runs:
  using: composite
  steps:
    - name: Set Action Version
      shell: bash
      run: |
        echo "RF_ACTION_VERSION=3.2.0" >> $GITHUB_ENV
    - name: Check for reruns
      uses: pat-s/always-upload-cache@v3
      if: (! inputs.dry_run)
      with:
        key: rainforest-run-${{ github.run_id }}-${{ inputs.cache_key }}-${{ github.run_attempt }}
        path: .rainforest_run_id
        restore-keys: |
          rainforest-run-${{ github.run_id }}-${{ inputs.cache_key }}-
    - name: Escape Parameters
      id: escape
      uses: actions/github-script@v6
      with:
        script: |
          const inputs = ${{ toJSON(inputs) }};
          for(const property in inputs) {
            core.exportVariable('RF_' + property.toUpperCase(), inputs[property]);
          }

    - name: Validate Parameters
      shell: bash
      id: validate
      run: |
        # Show Action Version
        echo "Using Rainforest GitHub Action v${RF_ACTION_VERSION}"

        # Ensure results directory is there
        mkdir -p results/rainforest

        echo "::add-mask::${RF_TOKEN}"

        # Define error helper
        error () {
          echo "::error ::${1}"
          echo "error=${1}" >> "$GITHUB_OUTPUT"
          exit 1
        }

        # Validate token
        if [ -z "${RF_TOKEN}" ] ; then
          error "Token not set"
        fi

        # Validate run_group_id
        if ! echo "${RF_RUN_GROUP_ID}" | grep -Eq '^[0-9]+$' ; then
          error "run_group_id not a positive integer (${RF_RUN_GROUP_ID})"
        fi

        # Check for rerun
        if [ -s .rainforest_run_id ] ; then
          RAINFOREST_RUN_ID=$(cat .rainforest_run_id)
          rm .rainforest_run_id
          echo "Rerunning Run ${RAINFOREST_RUN_ID}"

          RUN_COMMAND="rerun \"${RAINFOREST_RUN_ID}\" --skip-update --token \"${RF_TOKEN}\" --junit-file results/rainforest/junit.xml --save-run-id .rainforest_run_id"
        else
          RUN_COMMAND="run --skip-update --token \"${RF_TOKEN}\" --run-group ${RF_RUN_GROUP_ID} --junit-file results/rainforest/junit.xml --save-run-id .rainforest_run_id"
        fi

        # Validate conflict
        if [ -n "${RF_CONFLICT}" ] ; then
          case "${RF_CONFLICT}" in
            cancel) ;&
            cancel-all)
              RUN_COMMAND="${RUN_COMMAND} --conflict ${RF_CONFLICT}"
            ;;
            *)
              error "${RF_CONFLICT} not in (cancel cancel-all)"
            ;;
          esac
        fi

        # Set custom_url, or validate and set environment_id
        if [ -z "${RAINFOREST_RUN_ID}" ] && [ -n "${RF_CUSTOM_URL}" ] ; then
          RUN_COMMAND="${RUN_COMMAND} --custom-url \"${RF_CUSTOM_URL}\""
          if [ -n "${RF_ENVIRONMENT_ID}" ] ; then
            echo "::warning title=Environment ID Ignored::You've set values for the mutually exclusive custom_url and environment_id parameters. Unset one of these to fix this warning."
          fi
        elif [ -z "${RAINFOREST_RUN_ID}" ] && [ -n "${RF_ENVIRONMENT_ID}" ] ; then
          if echo "${RF_ENVIRONMENT_ID}" | grep -Eq '^[0-9]+$' ; then
            RUN_COMMAND="${RUN_COMMAND} --environment-id ${RF_ENVIRONMENT_ID}"
          else
            error "environment_id not a positive integer (${RF_ENVIRONMENT_ID})"
          fi
        fi

        # Validate execution_method / crowd
        if [ -z "${RAINFOREST_RUN_ID}" ] ; then
          if [ -n "${RF_EXECUTION_METHOD}" ] ; then
            case "${RF_EXECUTION_METHOD}" in
              automation) ;&
              crowd) ;&
              automation_and_crowd) ;&
              on_premise)
                RUN_COMMAND="${RUN_COMMAND} --execution-method ${RF_EXECUTION_METHOD}"
              ;;
              *)
                error "${RF_EXECUTION_METHOD} not in (automation crowd automation_and_crowd on_premise)"
              ;;
            esac
          fi

          if [ -n "${RF_CROWD}" ] ; then
            if [ -n "${RF_EXECUTION_METHOD}" ] ; then
              error "Error: execution_method and crowd are mutually exclusive"
            fi

            case "${RF_CROWD}" in
              default) ;&
              automation) ;&
              automation_and_crowd) ;&
              on_premise_crowd)
                RUN_COMMAND="${RUN_COMMAND} --crowd ${RF_CROWD}"
              ;;
              *)
                error "${RF_CROWD} not in (default automation automation_and_crowd on_premise_crowd)"
              ;;
            esac
          fi
        fi

        # Validate automation_max_retries
        if [ -n "${RF_AUTOMATION_MAX_RETRIES}" ] ; then
          if echo "${RF_AUTOMATION_MAX_RETRIES}" | grep -Eq '^[0-9]+$' ; then
            RUN_COMMAND="${RUN_COMMAND} --automation-max-retries ${RF_AUTOMATION_MAX_RETRIES}"
          else
            error "automation_max_retries not a positive integer (${RF_AUTOMATION_MAX_RETRIES})"
          fi
        fi

        # Set branch
        if [ -n "${RF_BRANCH}" ] ; then
          RUN_COMMAND="${RUN_COMMAND} --branch \"${RF_BRANCH//\"/\\\"}\""
        fi

        # Set description
        if [ -z "${RAINFOREST_RUN_ID}" ] && [ -n "${RF_DESCRIPTION}" ] ; then
          RUN_COMMAND="${RUN_COMMAND} --description \"${RF_DESCRIPTION//\"/\\\"}\""
        elif [ -z "${RAINFOREST_RUN_ID}" ] ; then
          RUN_COMMAND="${RUN_COMMAND} --description \"${GITHUB_REPOSITORY} - ${GITHUB_REF_NAME} ${GITHUB_JOB} $(date -u +'%FT%TZ')\""
        fi

        # Set release
        if [ -n "${RF_RELEASE}" ] ; then
          RUN_COMMAND="${RUN_COMMAND} --release \"${RF_RELEASE//\"/\\\"}\""
        elif [ -z "${RAINFOREST_RUN_ID}" ] ; then
          RUN_COMMAND="${RUN_COMMAND} --release \"${GITHUB_SHA}\""
        fi

        # Set background
        if [ -n "${RF_BACKGROUND}" ] ; then
          RUN_COMMAND="${RUN_COMMAND} --background"
        fi

        echo "command=${RUN_COMMAND}" >> "$GITHUB_OUTPUT"

    - name: Run Rainforest
      uses: docker://gcr.io/rf-public-images/rainforest-cli:latest
      if: (! inputs.dry_run)
      env:
        GH_ACTION_VERSION: ${{ env.version }}
      with:
        args: ${{ steps.validate.outputs.command }}
    - name: Archive Rainforest results
      uses: actions/upload-artifact@v3
      if: (! inputs.dry_run) && steps.validate.outputs.command && always()
      with:
        name: Test Results
        path: results/rainforest/junit.xml
    - name: Publish Test Report
      uses: mikepenz/action-junit-report@v3
      if: (! inputs.dry_run) && steps.validate.outputs.command && always()
      with:
        check_name: Rainforest Results
        report_paths: results/rainforest/junit.xml
